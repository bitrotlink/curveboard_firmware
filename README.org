#+TITLE: Curveboard Firmware

* Introduction
This Arduino Uno firmware is a complete USB keyboard controller. It was created in conjunction with the companion [[../curveboard][curveboard]] frame.

* Status
*Complete*

* Motivation

The standard dilemma with text editors is how to provide ergonomic access to navigation keys in a way that's compatible with the human brain. Vi solves the ergonomic problem by using /hjkl/ as the arrow keys, since those are home row keys on Qwerty, and likewise provides convenient access to other navigation keys. However, the tradeoff is a mode switch between text entry and command entry, which is not compatible with the human brain, regardless of how much the Vi fanatics Stockholm syndromed by standard keyboards bleat otherwise. The incompatibility endlessly results in accidentally typing random text when trying to enter commands, and accidentally running random commands when trying to type text. The incompatibility is literally endless; humans never adapt. I know from firsthand experience — when I used to use a standard keyboard, Vim was my primary editor for years.

Emacs avoids the modality problem by not separating command and text modes. The tradeoff is ergonomic, and it's horrific; Emacs by default will literally maim you. Google “emacs pinky” if you dare. Emacsers try to solve the problem by remapping keybindings on standard keyboards, but failure is inevitable. Some buy Kinesis keyboards in desperation, but those are useless — this also is my firsthand experience. Everybody else solves the navigation problem by gross hand movement to dedicated blocks of keys far from the home row, which is maddeningly slow.

The only real solution is a keyboard palm rest that operates as a function plane switch key, so that when your palms are lifted (the normal posture for typing), you can type text as usual, but when you rest a palm, the finger-operated keys change function to be navigation keys. This avoids both the modality problem and the ergonomic problem, but introduces a new problem: common host OSes (Linux, Windows, OS X) don't fully support such plane switching. That problem is most practically solved in keyboard firmware. Hence this project.

* Features

** Host-independent function plane switch key
Standard keyboards have modifier keys interpreted by the host computer. So, hosts' design flaws prevent you from achieving your desired mappings, and even if any properly designed hosts actually existed, bringing your favorite keyboard to another computer (or another OS on the same host) wouldn't bring your custom modifier mappings with you.

This firmware solves that problem via a function plane switch key interpreted entirely in firmware, and never seen by the host. For example, the keys in the inverted-T group with its base on the right hand's home row (letters /jkli/ on Qwerty) function as letter keys when the palm isn't rested on the plane switch key, but function as the arrow keys when the palm is rested. So far as the host is aware, the keyboard is a standard Qwerty keyboard, and standard letter and arrow keys are pressed.

** Mod-key-independent character remapping
Standard programmable keyboards allow arbitrary remapping of physical keys to logical keys, and provide macros for pressing sequences of logical keys, but don't allow arbitrary character remapping; the unshifted and shifted symbols for each key remain bound together. This firmware enables arbitrary character remapping via macros that use virtualized mod keys, including shift, alt, altgr, ctrl, the supplemental win/super key, and the function plane switch key.

For example, because parentheses are such commonly used characters, the default mapping assigns them to dedicated keys on the home row, where the caps-lock and apostrophe keys are on Qwerty. They can be pressed without pressing shift, and the firmware will generate /shift-9/ and /shift-0/ virtual chords, so that hosts expecting standard Qwerty keyboards will interpret the chords as parentheses. Many other commonly used characters are likewise unshifted, including the question mark, and other less common ones are moved to more logical shifts; e.g. the exclamation point is by default mapped to /shift-question-mark/, not /shift-1/. The firmware properly handles rollover even in cases involving virtually shifted and virtually unshifted keys.

** Unified altgr-supplemental key
Taking advantage of the host-independent function plane switch key, any other single key can optionally be configured to function as both the altgr and the win/super key, by serving as altgr when the fn key isn't pressed and as win/super when it is. This more efficiently assigns available physical key combinations to useful logical combinations, since altgr is rarely used in combination with keys normally assigned to the function plane, such as navigation keys.

** Sticky alt-tab via fn-tab
Alt-tab is a special chord commonly used in multiple host OSes, that maintains a window-switcher mode while alt continues to be held. This firmware enables the same functionality via fn-tab, such that the mode is maintained until the palm is lifted. This is a minor but handy convenience when the alt and tab keys are operated by different fingers, and an ergonomic necessity when those are operated by the same finger. For example, by default, this firmware assigns both alt and tab to keys operated by the left thumb, and therefore by default enables sticky fn-tab to compensate.

** Disadvantages
Although the physical mapping of the keys is fully encoded in a C array conveniently modifiable in the source code, and likewise is the function layer mapping, it's a different situation for the mod key (including shift) remappings. That's all done in C switch statements, which is less user friendly. I have no motivation to refactor the code to move the mod key remappings into an array, because the only advantage would be ease of changing those mappings, and I'm already satisfied with them the way they are. You would be satisfied with them too, if you had any taste.

* History
This project began as a complete replacement controller and firmware for a highly customized hand-made Maltron keyboard, due to Maltron's lack of proper rollover support and anti-ghosting. Since then, this firmware has evolved along with the frame design and has served in several physical prototypes, each serving as my daily driver and providing literal hands-on experience while I designed the next iteration.
